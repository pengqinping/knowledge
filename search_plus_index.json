{"./":{"url":"./","title":"Knowledge","keywords":"","body":" Knowledge 本项目加入 npm 管理 问题记录 Summary文件维护 git subtree 推送 _book 报错 non-fast-forward 启动多个gitbook 服务， 常用模板 表格 自动生成目录结构 Knowledge 记录学习过程中的知识点，主要记录开发技术相关. 电脑的搭建的开发环境 本项目加入 npm 管理 npm start == gitbook serve 启动本地服务 npm run deploy == gitbook build && git subtree push --prefix=_book origin coding-pages 把build 生成的文件 _book 发布到 远程的 coding-pages npm run pdf == gitbook pdf ./ ./konwledge.pdf 把工程生成 konwledge.pdf 文件 npm run epub 和 npm run pdf 一样是生成文件 npm run push 自动提交 ,在运行后，等待输入的地方 输入提交日志即可自动提交 问题记录 Summary文件维护 Title Record Question SUMMARY.md 标题太难维护，有什么办法没有折腾一下? Answer 有办法，两个办法: 1.使用 gitbook-plugin-summary 2. tree 命令 summary插件 npm install gitbook-plugin-summary 在 book.json中配置 plugins:{\"summary\"} 运行 gitbook serve 会自动生成目录结构 但有个很麻烦的问题就是 文件命名要以数字开头， tree 命令 tree . 可以列出 文件目录结构 tree 中文乱码问题 使用 tree -N 就可以解决 git subtree 推送 _book 报错 non-fast-forward 执行下面的命令: git push origin git subtree split --prefix=_book coding-pages:coding-pages --force 启动多个gitbook 服务， gitbook serve --lrport 35730 --port 4002 我们需要修改两个端口 报错 35729 端口被占用 Port for livereload server to listen on (Default is 35729) 常用模板 表格 |Question|Answer| |:--|:--| |One|First| 自动生成目录结构 content pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"dev-gitbook/":{"url":"dev-gitbook/","title":"GitBook","keywords":"","body":"GitBook Some links https://www.gitbook.com/ https://github.com/GitbookIO/gitbook pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"dev-gitbook/GitBook-环境搭建.html":{"url":"dev-gitbook/GitBook-环境搭建.html","title":"GitBook环境搭建及项目创建","keywords":"","body":"GitBook环境配置和常用命令 node.js 官网: https://nodejs.org/en/download 安装gitbook命令行工具 命令行执行：npm install -g gitbook-cli 安装后可以使用全局命令 gitbook 在本地创建一个文件夹 然后 进入 初始化gitbook ： gitbook init 会生成两个文件, README.md 书籍的介绍写在这里， SUMMARY.md 文件书籍目录结构在这里配置 找一个 markdown 编辑文件 (Typora， VsCode, Atom,) 以下步骤使用命令操作 在目录中新增章节的目录后使用 gitbook init 会自动生成章节的文件 启动本地服务器 gitbook serve 自动编译为静态html文件 生成html目录 gitbook build [书籍路径] [输出路径] 生成PDF文件 gitbook pdf ./ ./mybook.pdf 生成epub电子书 gitbook epub ./ ./mybook.epub pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"dev-gitbook/GitBook-book.json.html":{"url":"dev-gitbook/GitBook-book.json.html","title":"GitBook之book.json配置","keywords":"","body":" GitBook 详解 GitBook book.json 说明及使用 book.json 字段说明 styles 的配置 gitbok 插件安装的方法 gitbook 默认插件 book.json 实例 gitbook 常用插件 back-to-top-button chapter-fold code sharing-plus tbfed-pagefooter page-copyright simple-page-toc ancre-navigation klipse donate pageview-count popup GitBook 详解 GitBook book.json 说明及使用 Question Answer book.json是用来做什么的? 配置 Gitbook 生成静态页面的配置文件 book.json怎么创建放在那里？ 手动创建，gitbook 项目的根目录，和 SUMMARY.md 同级 book.json有哪些配置？ title, author, description, language, links , styles, plugins, pluginsConfig 字段说明 本项目book.json配置 styles中的样式指定文件( \"website\": \"assert/style/website.css\",)怎么生成？ 自己创建和编写，根据需求调整样式，路径可以自己定义， 详细配置 在book.json配置plugins 后怎么生效呢？ 1. 首先插件要配置正确，名称千万不要错， 2. 安装插件，这里介绍三种方法 3. gitbook buil 即可生效 默认插件有哪些？屏蔽默认插件如何操作 1. 屏蔽默认插件，在 book.json 中 的 plugins 中配置 -highlight 这样就去掉了默认的高亮插件， 2. 默认的插件有 常见的插件有哪些？ 常见的插件说明及使用 book.json 字段说明 属性 含义 Demo title 设置书本的标题 \"title\": \"Knowledge\" author 作者的相关信息 \"author\": \"Royal\" description 本书的简单描述 \"description\":\"这是我的环境配置说明\" language Gitbook使用的语言 \"language\": \"zh-hans\" styles 自定义页面样式，用于 book build \"style\":{ \"website\": \"assert/style/website.css\"} plugins 插件列表 \"plugins\":{\"back-to-top-button\"} pluginsConfig 插件配置 具体配置根据使用的插件进行配置 styles 的配置 目前style配置根据导出的文件类型来，目前也就下面几种类型 styles Key 含义 website 生成Html将会使用的样式文件 ebook 生成ebook..... pdf 生成pdf..... mobi 生成mobi..... epub 生成epub..... gitbok 插件安装的方法 在根目录下执行 gitbook install 使用npm安装，命令格式 npm install gitbook-plugin-插件名字，如 npm install gitbook-plugin-code 从 GitHub 下载源码，放到node_modules文件夹里 gitbook 默认插件 插件名词 说明 highlight： 代码高亮 search： 导航栏查询功能（不支持中文） sharing： 右上角分享功能 font-settings： 字体设置（最上方的\"A\"符号） livereload： 为GitBook实时重新加载 book.json 实例 { \"title\": \"Knowledge\", \"language\": \"zh-hans\", \"plugins\": [ \"code\", \"back-to-top-button\", \"tbfed-pagefooter\", \"search-pro\", \"fontsettings\", \"simple-page-toc\", \"links\" ], \"styles\": { \"website\": \"assert/style/website.css\", \"ebook\": \"assert/style/ebook.css\", \"pdf\": \"assert/style/pdf.css\", \"mobi\": \"assert/style/mobi.css\", \"epub\": \"assert/style/epub.css\" }, \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\": \"pengqinping\", \"modify_label\": \"最后更新时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"fontsettings\": { \"theme\": \"white\", \"family\": \"serif\", \"size\": 12 }, \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true }, \"links\": { \"gitbook\": false } } } gitbook 常用插件 参考地址：https://www.jianshu.com/p/427b8bb066e6 插件大全：https://zhaoda.net/2015/11/09/gitbook-plugins/ 插件大全：http://gitbook.zhangjikai.com/plugins.html#gitbook-%E6%8F%92%E4%BB%B6 back-to-top-button 插件名词 back-to-top-button 返回头部 修改配置 在book.json 中新增插件 \"plugins\" : [ \"page-toc-button\" ] 新增插件配置 \"pluginsConfig\": { \"page-toc-button\": {\"maxTocDepth\": 2, \"minTocSize\": 2} } 安装方法 1. gitbook install 2. npm install gitbook-plugin-back-top-button 图示 chapter-fold 插件名词 chapter-fold 折叠目录 修改配置 在book.json 中新增插件 \"plugins\" : [ \"chapter-fold\" ] 安装方法 1. gitbook install 2. npm install gitbook-plugin-chapter-fold 图示 code 插件名词 code 显示代码copy按钮 修改配置 在book.json 中新增插件 \"plugins\" : [ \"code\" ] 新增配置 \"pluginsConfig\": { \"code\": {\"copyButtons\": false } } 安装方法 1. gitbook install 2. npm install gitbook-plugin-code 参数配置 copyButtons 是否显示 copy 按钮 图示 sharing-plus 插件名词 sharing-plus 分享插件 修改配置 在book.json 中新增插件 \"plugins\" : [ \"sharing-plus\" ] 新增配置 安装方法 1. gitbook install 2. npm install gitbook-plugin-sharing-plus 参数配置 为true的代表直接显示在页面顶端，为false的不显示，不写默认为false \"all\"中代表点击分享符号显示出来的 图示 tbfed-pagefooter 插件名词 tbfed-pagefooter 页面添加页脚 修改配置 在book.json 中新增插件 \"plugins\" : [ \"tbfed-pagefooter\" ] 新增配置 安装方法 1. gitbook install 2. npm install gitbook-plugin-tbfed-pagefooter 图示 page-copyright 插件名词 page-copyright 页面添加页脚 修改配置 在book.json 中新增插件 \"plugins\" : [ \"page-copyright\" ] 新增配置 安装方法 1. gitbook install 2. npm install gitbook-plugin-page-copyright 图示 暂时无图，可以自己配置 simple-page-toc 插件名词 simple-page-toc 生成本页目录 修改配置 在book.json 中新增插件 \"plugins\" : [ \"simple-page-toc\" ] 新增配置 \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true} 安装方法 1. gitbook install 2. npm install gitbook-plugin-simple-page-toc 参数说明 maxTocDepth 标题的最大深度（2 = h1 + h2 + h3）。不支持值> 2 minTocSize 显示toc按钮的最小toc条目数。 新增方法 使用方法: 在需要生成目录的地方用下面的标签括起来，全文都生成的话就在首尾添加 &lt;!-- toc --&gt; &lt;!-- endtoc --&gt; 图示 ancre-navigation 插件名词 ancre-navigation 悬浮目录和返回 修改配置 在book.json 中新增插件 \"plugins\" : [ \"ancre-navigation\" ] 安装方法 1. gitbook install 2. npm install gitbook-plugin-ancre-navigation 图示 klipse 插件名词 klipse 嵌入类似IDE的功能 修改配置 在book.json 中新增插件 \"plugins\" : [ \"klipse\" ] 安装方法 1. gitbook install 2. npm install gitbook-plugin-klipse 支持语言 Javascript ,ruby,C++, PHP ,Python, JSX ,EcmaScript2017,Google Charts,Scheme, BrainFuck 代码实例 如下 print [x + 1 for x in range(10)] donate 插件名词 donate 打赏插件 修改配置 在book.json 中新增插件 \"plugins\" : [ \"donate\" ] \"pluginsConfig\": { \"donate\": { \"wechat\": picWeChar,\"alipay\": zfbpic, \"title\": \"\",\"button\": \"赏\",\"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } 安装方法 1. gitbook install 2. npm install gitbook-plugin-donate 参数说明 wechat 微信收款图片 alipay 支付宝收款图片 图示 无测试图片 pageview-count 插件名词 pageview-count 阅读量计数 修改配置 在book.json 中新增插件 \"plugins\" : [ \"ageview-count\" ] 安装方法 1. gitbook install 2. npm install gitbook-pageview-count 图示 popup 插件名词 popup 弹出大图 修改配置 在book.json 中新增插件 \"plugins\" : [ \"popup\" ] 安装方法 1. gitbook install 2. npm install gitbook-popup 图示 点击图片弹出预览 pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"dev-gitbook/GitBook-命令和npm.html":{"url":"dev-gitbook/GitBook-命令和npm.html","title":"GitBook-命令和npm","keywords":"","body":"当gitbook 遇到了 npm 为了方便代码管理和提交效率 对一些操作进行了 npm 管理 package.json 中新增脚本 \"scripts\": { \"start\": \"gitbook serve\", \"predeploy\": \"echo \\\"======= Begin deploy =======\\\" \", \"deploy\": \"gitbook build && git subtree push --prefix=_book origin coding-pages\", \"postdeoply\": \"echo \\\"======= End deploy =======\\\" \", \"pdf\": \"gitbook pdf ./ ./knowledge.pdf\", \"epub\": \"gitbook epub ./ ./knowledge.epub\", \"prepush\": \"echo \\\"======= Begin Auto push =======\\\" \", \"push\": \"git status && git add . && read -p \\\"please input commit info:\\\" commitInfo && git commit -m \\\"$commitInfo\\\" && git pull && git push\", \"postpush\": \"echo \\\"======= End Auto push =======\\\" \" } 使用方法 npm start 启动 gitbook服务 npm run delopy 发布 build 的静态页面到 对于的 page 服务，可以供公网访问 npm run push 自动意见提交代码 过程中需要输入 commit 日志 pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"dev-hexo/":{"url":"dev-hexo/","title":"Hexo","keywords":"","body":"Hexo 搭建hexo博客相关网址 hexo教程官网:https://hexo.io/zh-cn/ 搭建教程:https://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html 主题推荐:http://www.jianshu.com/p/bcdbe7347c8d next主题安装:http://theme-next.iissnan.com/getting-started.html pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"dev-hexo/hexo-环境搭建.html":{"url":"dev-hexo/hexo-环境搭建.html","title":"Hexo快速构建个人博客","keywords":"","body":"Hexo快速构建个人博客 操作说明 hexo init 初始化项目 hexo new page \"First Page\" 创建一个文章 hexo server 启动本地服务查看效果 hexo generate 文件部署前需要生成 hexo deploy 部署到git仓库， 部署和生成可以一起 hexo generate --deploy || hexo deploy --generate || 简写（ hexo g -d | hexo d -g） 说明：编译代码全部提交到 master 分支，使用 hexo deploy 自动推送到 gh-pages/condig-pages 分支, 不能自己手动进行推送代码到 生成网页的分支 相关命名 hexo server --启动服务 hexo generate --生成静态页面文件全部放在public文件夹下面 hexo deploy --自动部署到相应的代码库，目前配置了两个，github&coding hexo new page \"page\" hexo new post pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-android/":{"url":"program-android/","title":"Android","keywords":"","body":"pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-android/Gradle-common.html":{"url":"program-android/Gradle-common.html","title":"Gradle全局配置","keywords":"","body":"多个项目共用 config.gradle配置 共用 config.gradle 说明 所有的项目 版本管理配置都写在这里，便于项目依赖升级, 以下给出导入实例，后续可以直接Copy使用 如何引入到 project 和 module 子模块和项目的依赖都项目的 build.gradle 中配置 apply from: \"../config.gradle\" // sub module buildscript { // 这里引入是给 项目根目录编译使用 apply from: \"../config.gradle\" } Project ClassPath classpath rootProject.ext.classpath.gradle_plugin_android classpath rootProject.ext.classpath.gradle_plugin_kotlin classpath rootProject.ext.classpath.gradle_plugin_butterknife Project Maven库地址 maven {url rootProject.ext.repos.aliyunJcenter} maven {url rootProject.ext.repos.aliyunGoogle} maven {url rootProject.ext.repos.jitpack} Sub Module - Android build version buildToolsVersion rootProject.ext.android.buildToolsVersion compileSdkVersion rootProject.ext.android.compileSdkVersion minSdkVersion rootProject.ext.android.minSdkVersion targetSdkVersion rootProject.ext.android.targetSdkVersion Sub Moudle - Dependencies implementation rootProject.ext.dependencies.xxxx implementation rootProject.ext.dependencies.kotlin_stdlib_jdk7 implementation rootProject.ext.dependencies.androidx_core_ktx implementation ootProject.ext.dependencies.androidx_appcompat gradle 跨目录导入项目 使用场景： git库之间有项目依赖，在开发过程中大部分的项目中module依赖都是当前项目下的module,或者直接依赖 仓库，aar, jar 等，不过有时候并行开发，依赖的项目是属于其他项目，gradle官方给出了解决方案：如下 gralde英文版走一波 Project - setting.gradle // 导入一个项目 include 'baz' project(':baz').projectDir = file('foo/baz') // 导入多个项目 file('subprojects').eachDir { dir -> include dir.name project(\":${dir.name}\").projectDir = dir } pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-android/UI-FullScreen.html":{"url":"program-android/UI-FullScreen.html","title":"UI-Android项目中的全屏","keywords":"","body":" Android 中的全屏 全屏效果 设置方法 Theme Style Window Flags DecorView systemUiVisibility Window LayoutParams Flag 说明 常见的全屏场景 Guide引导 全屏图片预览 Android 中的全屏 code & apk : https://github.com/pengqinping/project_android_as/tree/master/UI 全屏效果 全屏 全屏有标题 非全屏 设置方法 Method Code Describe Theme 设置全屏样式 Theme style 没有标题栏效果 Window Flags Window Flags 可以设置 FLAG_LAYOUT_NO_LIMITS 来系统的标题显示 DecorView UIVisiblity DecorViewSystemUiVisiblity 两种全屏方式 Theme Style true Window Flags // 设置全屏 以下三种效果相同 window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN) window.attributes.flags = window.attributes.flags or WindowManager.LayoutParams.FLAG_FULLSCREEN window.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN) // 取消全屏 window.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN) window.attributes.flags = window.attributes.flags and WindowManager.LayoutParams.FLAG_FULLSCREEN.inv() window.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN) DecorView systemUiVisibility if(isChecked) { window.decorView.systemUiVisibility = window.decorView.systemUiVisibility.or(View.SYSTEM_UI_FLAG_FULLSCREEN) } else { window.decorView.systemUiVisibility = window.decorView.systemUiVisibility.and(View.SYSTEM_UI_FLAG_FULLSCREEN.inv()) } Window LayoutParams Flag 说明 这里全屏需要关注的时 两个 FLAG FLAG_FULLSCREEN 和 FLAG_LAYOUT_NO_LIMITS WindowsFlag的集合 常见的全屏场景 Guide引导 全屏 显示StatusBar 和 隐藏NavigationBar StatusBar覆盖在图片上面 效果图如下： 全部代码：Clike Me override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_guide) // set StatusBar background transparent StatusBarCompat.setStatusBarColor(this, Color.TRANSPARENT) // 设置状态栏字体颜色为黑色 StatusBarCompat.setLightStatusBar(window,true) // set FullScreen in Layout setFullScreenWithStatusBar() setFullScreenHideNavigation() } // 系统状态栏隐藏 private fun setFullScreenWithStatusBar(){ var uiVisibility = window.decorView.systemUiVisibility uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN) window.decorView.systemUiVisibility = uiVisibility } // 系统导航栏隐藏 private fun setFullScreenHideNavigation(){ var uiVisibility = window.decorView.systemUiVisibility uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION).or(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) if(Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) { uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) } window.decorView.systemUiVisibility = uiVisibility } 全屏图片预览 全屏预览 状态栏能够动态的显示和隐藏 效果图如下： private var toBeHideSystemStatusBar = true override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_full_preview_image) // set StatusBar background transparent StatusBarCompat.setStatusBarColor(this, Color.TRANSPARENT) // 设置状态栏字体颜色为黑色 StatusBarCompat.setLightStatusBar(window,false) // set FullScreen in Layout setFullScreenWithStatusBar() setFullScreenHideNavigation() imgPreview.setOnClickListener { toBeHideSystemStatusBar = if(toBeHideSystemStatusBar){ topView.visibility = View.GONE window.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN) false } else { topView.visibility = View.VISIBLE window.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN) true } } } // 系统状态栏隐藏 private fun setFullScreenWithStatusBar(){ var uiVisibility = window.decorView.systemUiVisibility uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN) window.decorView.systemUiVisibility = uiVisibility } // 系统导航栏隐藏 private fun setFullScreenHideNavigation(){ var uiVisibility = window.decorView.systemUiVisibility uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION).or(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) if(Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) { uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) } window.decorView.systemUiVisibility = uiVisibility } pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-android/UI-NotchScreen.html":{"url":"program-android/UI-NotchScreen.html","title":"UI-Android全屏中的刘海屏","keywords":"","body":" Android 中的刘海屏适配 什么是刘海屏？ 出现在哪些版本和设备呢？ 什么时候做刘海屏兼容呢？ 设置之前全屏的页面能够在刘海屏上也全屏-关键内容 各个版本设置代码 Goggle: 华为 如何做兼容 - 官方给出的文档 刘海机型详情 小米刘海屏设备 华为刘海屏设备 附上一张思维导图 Android 中的刘海屏适配 什么是刘海屏？ 头部有黑条 在中间中间 来个图感受下 出现在哪些版本和设备呢？ Title Descibe 版本： Android O (Android8.0) 及以上 常见厂商： 华为、小米、OPPO、VIVO 小米常见设备信息 查看详情 华为常见设备信息 查看详情 什么时候做刘海屏兼容呢？ 希望在刘海屏的全屏，并且全部填充到刘海区, 有部分全屏属性设置的时候是不会填充到刘海区的。特别是横屏的时候。 页面填充到刘海区不遮挡操作按钮 先来看两张图 竖屏 横屏 右边一直都是黑色区域，所以不管怎么设置都无法在横屏下出现全屏效果。 默认情况下只有全屏的时候显示了系统状态栏，才会填充到刘海区，而且只有竖屏，横屏后 状态栏和不在刘海区了，所以无法真正的全屏。 按钮一全屏代码： private fun setFullScreenWithAttribute(toFullScreen: Boolean) { if (toFullScreen) { inFullScreen = true val lp = window.attributes lp.flags = lp.flags or WindowManager.LayoutParams.FLAG_FULLSCREEN window.attributes = lp } else { inFullScreen = false val attr = window.attributes attr.flags = attr.flags and WindowManager.LayoutParams.FLAG_FULLSCREEN.inv() window.attributes = attr } } 按钮二全屏代码： // 系统状态栏显示的全屏 private fun setFullScreenWithStatusBar(){ inFullScreen = true var uiVisibility = window.decorView.systemUiVisibility uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN) window.decorView.systemUiVisibility = uiVisibility } 按钮三全屏代码： private fun setFullScreenWithStatusBarHideBar(){ inFullScreen = true var uiVisibility = window.decorView.systemUiVisibility uiVisibility = uiVisibility.or(View.SYSTEM_UI_FLAG_FULLSCREEN) window.decorView.systemUiVisibility = uiVisibility } 设置之前全屏的页面能够在刘海屏上也全屏-关键内容 无图无真相，先看一个效果图 - 直接看竖屏，横屏的逻辑一样 Describe 1. 出现白边就是我们的页面已经可以支持绘制到刘海区了， 2. 如果没有设置的时黑色的，为什么是白色是因为Activity主题是白色，而没有处理状态栏残留区域，第二段代码中就可以看到图片填满了 适配流程图: 各个版本设置代码 项目代码可以在这里找到 https://github.com/pengqinping/project_android_as/tree/master/UI/fullscreen Goggle: override fun hasNotchInScreen(window: Window): Boolean { val windowInsets = window.decorView.rootWindowInsets ?: return false val displayCutout = windowInsets.displayCutout if (displayCutout == null || displayCutout.boundingRects == null) { return false } return true } override fun setFullScreenIgnoreNotch(window: Window) { val attributes = window.attributes attributes.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES window.attributes = attributes } override fun exitFullScreenInNotch(window: Window) { val attributes = window.attributes attributes.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER window.attributes = attributes } 华为 如何做兼容 - 官方给出的文档 Describe URL 华为开发平台 https://developer.huawei.com/consumer/cn/devservice/doc/50114 小米开发平台 https://dev.mi.com/console/doc/detail?pId=1293 Google官方 https://developer.android.com/preview/features#cutout VIVO https://dev.vivo.com.cn/documentCenter/doc/103 需要自己找到 菜单/vivo手机适配指南/异形屏应用适配指南 OPPO https://open.oppomobile.com/wiki/doc#id=10293 需要注册才能看，比较恶心 CSDN 比较全面的博主 https://blog.csdn.net/DJY1992/article/details/80689632 刘海机型详情 小米刘海屏设备 点我去官网 华为刘海屏设备 点我去官网 附上一张思维导图 pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/":{"url":"program-python/","title":"Python","keywords":"","body":"python 能力矩阵 平台： linux unix 系统：线程、进程、Shell编程 网络：网络原理、Http协议、Socket开发、异步IO开发 Web开发：偏后端，MVC框架要求会 Django、Flask、Tornado之一 算法要求：转置矩阵、求质数等现场能写 数据库：关系型数据库 MySql、NOSQL 可视化：Web的前端 HTML ES6 Vue python 课程体系 课程内容： 深入浅出带你学Python冲击年薪30万 基础： 操作系统，网络基础 数据库基础，python语言基础 进阶：函数封装思想 面向对象设计、装饰器、描述器 高级：网络编程、并发编程、ORM、最新前端框架（react Vue） 实战： pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/Unit-1-认识Python.html":{"url":"program-python/Unit-1-认识Python.html","title":"Unit-1-认识Python","keywords":"","body":"第一章: 基础语法 基础语法将带你认识 Python, 了解这个语言的使用规则 交互式编程 & 脚本编程 交互式 直接在命令行中输入python语句运行 python $ python Python 2.7.10 (default, Oct 6 2017, 22:29:07) [GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.31)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> print \"hello,Python\" hello,Python >>> 脚本编程 创建文件 test.py Coding 在 test.py 中输入 #!/user/bin/python print \"hello world\"; 运行 命令行输入 python test.py 来尝试一下吧print \"hello world\" 标识符 组成：字母、数字、下划线 开头单下划线 _foo 表示不能直接访问的 类属性 , 不能通过 import * 导入 开头双下划线 __foo 表示类的 私有属性 , 开头和结尾都是双下划线 __init__() 特殊专用方法 代码块 没有 { } 来表示代码块 使用相同缩进来表示代码块, 缩进可以是tab, 2空格，4空格if True: print \"Answer\" print \"True\" 多行语句 \\ 来连接 [] () 等语句不需要多行连接符 totla = time_one + \\ time_two + \\ time_three days = ['Monday','Tuesday', 'wednesday' 'Thusday'] 注释 单行 # 多行 ''' & \"\"\" 三个单引号 或者双引号， 需要有开始和结束 pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/Unit-2-数据类型.html":{"url":"program-python/Unit-2-数据类型.html","title":"Unit-2-数据类型","keywords":"","body":" 数据类型 变量 标准数据类型 字符串 列表 元祖 字典 类型转换 数据类型 变量 不需要声明类型 counter = 12 #数字 name = \"小明\" #字符串 变量使用前必须负责，复制才能创建 没有声明的概念 多变量赋值 a = b = c = 1 # a 、 b 、c 都是1 在同一内存空间 a, b, c = 1, 2, \"john\" # 类似解构语法 标准数据类型 Numbers （数字）int、long 、float complex (复数) String （字符串） List （列表） Tuple （元祖） Dictionary (字典) 字符串 非常强大的字符串处理功能 长度函数 __len__() 截取 正向 [start,end] 截取，倒数两个字符 \b[-1:-2] 字符串格式化 print \"My name is %s and age is %d\" %('zara',21) #!/usr/bin/python # -*- coding: UTF-8 -*- str = 'Hello world' print str # print str.__class__ # out '' print str.__len__() # out len of str print str[0] # first of the str var 'H' print str[2:5] # out 'llo' print str[2:] # out 'llo world' print str*2 # out 'Hello worldHello world' print str + \"Test\" # append 'Test' end of str out 'Hello worldTest' print str[::-1] # 字符反转 只支持英文字符 列表 存放符合数据类型，各种类型都可以 截取规则和string一致 []表示数组 #!/user/bin/python # -*- coding: UTF-8 -*- # python 的数组可以存放各种类型的数据 list = ['runoob',768,2.33,'john',70.2] tinylist = [123,'john'] print list # out ['runoob', 768, 2.33, 'john', 70.2] print list[0] # out 'runoob' print list[1:3] # out '[768, 2.33]' print list[2:] # out '[2.33, 'john', 70.2]' print tinylist * 2 # out '[123, 'john', 123, 'john']' print list[-1] # out '70.2' '表示一个元素' print list[-1:] # '[70.2]' 表示一个数组 元祖 元祖 = 自读列表List () 来表示 不允许更新 字典 key - value 结构 通过 key 获取 value {} 来表示字典 取值方式 dirc[key] #!/user/bin/python # -*- coding: UTF-8 -*- # 列表是有序的对象集合,字典是无序的对象集合 # 类似JAVA的MAP数据结构,通过Key来获取,而不是下标获取 dict = {} dict['one'] = \"This is a dictionary\" # set value for string key 'one' dict[2] = \"This is two\" # set value for Number key '2' print dict['one'] # print value of key 'one' print dict[2] # print value of key 2 print dict.keys() # list of key # print dict.keys().__class__ print dict.values() # list of values # print dict.values().__class__ 类型转换 转Number int(x), long(x), float(x), complex(x) String 相关 str(x) 转换为表达式字符串 repr(x) 类似Java toString()对象转字符串, eval(x) 用来计算在字符串中的有效Python表达式,并返回一个对象, 字符串转对象 records = [ { \"name\":\"Max\", \"age\": 18, \"sex\": \"man\" }, { \"name\":\"jony\", \"age\": 34, \"sex\": \"feman\" } ] c_records = repr(records) # print c_records.__class__ # out print c_records # out \"[{'age': 18, 'name': 'Max', 'sex': 'man'}, {'age': 34, 'name': 'jony', 'sex': 'feman'}]\" t_records = eval(c_records) # print t_records.__class__ # print t_records # 遍历数组 集合 tuple(s), list(s) , ... 整数转\b字符： chr(x) print chr(100) # out: d 进制转换 hex(x) , oct(x) pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/Unit-3-运算符和语句.html":{"url":"program-python/Unit-3-运算符和语句.html","title":"Unit-3-运算符和语句","keywords":"","body":"3.运算符和语句 逻辑运算符 && == and 、 || == or ! == not 成员运算符 in 在序列中 return true not in 不在序列中 return true 条件 if 、 else 、 elif 循环 while for 循环控制 break continue pass pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/Unit-4-常用系统类.html":{"url":"program-python/Unit-4-常用系统类.html","title":"Unit-4-常用系统类","keywords":"","body":" 4. 比较常用的东西 时间Time 日历 Calendar 函数 模块 文件I/O 文件打开和关闭 4. 比较常用的东西 时间Time 两个模块 time and calendar 时间戳是以 1970年1月1日午夜经历了多少时间来表示的 模块使用前需要导入 import time; #!/usr/bin/python # -*- coding: utf-8 -*- import time; #引入time模块 ticks = time.time() print \"current time is : \",ticks ltime = time.localtime(time.time()) print \"time : \",ltime localtime = time.asctime(time.localtime(time.time())) print \"local time \",localtime \"\"\" python中时间日期格式化符号： %y 两位数的年份表示（00-99） %Y 四位数的年份表示（000-9999） %m 月份（01-12） %d 月内中的一天（0-31） %H 24小时制小时数（0-23） %I 12小时制小时数（01-12） %M 分钟数（00=59） %S 秒（00-59） %a 本地简化星期名称 %A 本地完整星期名称 %b 本地简化的月份名称 %B 本地完整的月份名称 %c 本地相应的日期表示和时间表示 %j 年内的一天（001-366） %p 本地A.M.或P.M.的等价符 %U 一年中的星期数（00-53）星期天为星期的开始 %w 星期（0-6），星期天为星期的开始 %W 一年中的星期数（00-53）星期一为星期的开始 %x 本地相应的日期表示 %X 本地相应的时间表示 %Z 当前时区的名称 %% %号本身 \"\"\" # 格式化日期 # time.strftime(format[,t]) # 格式化成 '2017-12-30 14:41:40 '形式 print time.strftime(\"%Y-%m-%d %H:%M:%S\",time.localtime()) print time.strftime(\"%a %b %d %H:%M:%S %Y\",) # 字符串转为时间戳 startTime = \"Sat Mar 28 22:24:24 2016\" # time.mktime(tuple) 时间元组转为 时间戳 print time.mktime(time.strptime(startTime,\"%a %b %d %H:%M:%S %Y\")) 日历 Calendar #!/usr/bin/python # -*- coding: UTF-8 -*- import calendar # 获取18年1月的时间 cal = calendar.month(2018,1) print cal 函数 def 关键字申明函数 : 冒号缩进 注释风格：在函数的第一行 #!/usr/bin/python # -*- coding: UTF-8 -*- # 定义函数 # def 关键字开头, 参数放在'()'中 块有冒号缩进表示 \"\"\" def functionname(parameters): \"函数内容\" fucnction_suite return [expression] \"\"\" # 定义函数做 两个整数的求和 def sumDoubleNumber(a,b): sum = a+b return sum print \"23 and 85 sum : \" ,sumDoubleNumber(23,85) # 可变和不可变两种对象的区别 # python中 String, tuples, numbers 是不可更改的对象,而 list, dict 等则是可以修改的对象 # 可变类型: list 变量赋值 la = [1,2,3,4] la[2]=5 la本身不变,只是将内部的一部分值修改 # 不可变类型: number变量 a = 5 然后在赋值 a = 10 ,这里a 表示一个指针 赋值=10后,a就指向了 10 ,而之前的5被丢弃 # python中的参数传递 # 不可变类型参数: 类似java中的值传递 ,函数内部做参数的值的修改不会导致入参的值变化, # 可变类型参数: 类型java中的引用传递 , 函数内对对参数做修改会导致入参的变化 def valuesPass(a,b): a = 20 b = 30 return a+b varFirstNumber = 23 varSecondNumber = 85 print \"values pass first:\",varFirstNumber,\" second:\" ,varSecondNumber print \"sum:\",valuesPass(varFirstNumber,varSecondNumber) print \"values pass first:\",varFirstNumber,\" second:\" ,varSecondNumber # test ref change this value def refPass(a): if a.__class__ is list: a[0] = 100 return a varRefList = [200,300] print \"ref before \",varRefList print refPass(varRefList) print \"ref after \",varRefList # 可变参数 def mutableParams(*mutablep): for mp in mutablep: print mp return print mutableParams(11,22,33,44) # 匿名函数 lambda lamsum = lambda arg1,arg2: arg1+arg2 print \"lambda sum:\",lamsum(100,200) 模块 一个.py文件就是一个模块 import 导入模块 module_log.py !/user/bin/python # -*- coding: utf-8 -*- import time def logtime(): print \"now time :\",time.asctime(time.localtime(time.time())) return def logPara(param): print param return call_module.py #!/user/bin/python # -*- coding: utf-8 -*- import model_log model_log.logtime() model_log.logPara(\"引用\") 文件I/O 打印到屏幕 print 从键盘读取 raw_input 输入一行 ， input 支持表达式输入 文件打开和关闭 内置函数open #/user/bin/python # -*- coding: utf-8 -*- demoFile = open(\"demo.txt\",'ab+'); print demoFile.name demoFile.write(\"God god study day day up\\n\") demoFile.close() readFile = open(\"demo.txt\",'r+') print \"read for demo:\",readFile.read() readFile.close() pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/Unit-5-面向对象.html":{"url":"program-python/Unit-5-面向对象.html","title":"Unit-5-面向对象","keywords":"","body":"面向对象 面向对象基本概念 类： class 来声明一个类 对象：类的实例，通过类的构造器函数创建. 实例化：通过构造器来创建实例的动作叫实例化 类变量：属于类共有 Java中通过static来描述的变量属于类变量 实例变量：类的属性 叫实例变量 通过类的对象来访问的属相，注意：变量声明的概念，可以直接使用 数据成员：类变量和实例变量统称为数据成员 方法：类中定义的函数， self: 类中的 self 表示的时 对象实例，\b 属性添加： \b第一次用 对象.属性 = value 即能添加一个属性 属性删除：del 对象.属性， delattr(对象，name) __init__() 构造器函数 用来创建实例,一般在这里做属性创建 __del__() 对象销毁时被调用，使用 del \b来删除对象时，会出发 __del__() 函数的调用 \b继承语法： class Child(parent1,parent2): \bChild 类继承了 parent1 和 parent2 两个父类 子类判断：issubclass(sub，super) 如果sub是super的子类返回true 对象判断 isinstance(obj,class) 如果obj 是class 的实例对象返回 true __ 双下划线 私有属性 或函数 _ 单下划线 protected 类型 #!/user/bin/python # -*- coding: utf-8 -*- \"声明Empolyee类\" class Empolyee: '员工基类' empCount = 0 # 类变量 def __init__(self,name,age): # 构造函数 self.name = name # 实例变量 由于无需声明，可以直接在赋值是制定变量名 self.age = age Empolyee.empCount += 1 # 访问类变量 def displayCount(self): # 方法 print \"totalNumber:\",Empolyee.empCount def displayEmployee(self): print \"name:\",self.name, \" age: \",self.age xiaomi = Empolyee(\"xiaomi\",\"18\") # 创建实例 print xiaomi.name # 访问对象属性 print xiaomi.age print xiaomi.displayCount() # 访问对象方法 print xiaomi.displayEmployee() #print __main__.Empolyee print xiaomi.__class__ #属性字典 print Empolyee.__dict__ # 类注释 print Empolyee.__doc__ \b基础重载方法 init() 构造函数 del() 析构方法 repr() 转为对象string str() cpm(self,x) 对象比较 运算符重载 add(self, other) 对象之间相加 pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/Unit-6-正则表达式.html":{"url":"program-python/Unit-6-正则表达式.html","title":"Unit-6-正则表达式","keywords":"","body":"正则表达式 关键词 正则表达式引擎: re 模块 正则表达式对象: pattern 匹配结果对象： match 关键类介绍 pattern = re.compile(strpattern) match = pattern.match(targetObject) 最难的就是如何编写自己需要的 \bstrpattern 编写正则表达式规则详解 匹配实例 从字符串的第一个开始 匹配简写 pattern , match = re.match(r'hello','hello world')! import re pattern = re.compile(r'hello') match = pattern.match('hello world!') # 匹配target ,\b print match.group() \b# 输出 hello # 因为 pattern 不是从头开始的 match1 = pattern.match('world hello ') #out None # 使用search 可以不用从头查找 match2 = pattern.search('world hello') # out hello 符号理解 看到正则头晕的大部分原因是由于正则的符号导致的 基本字符 . \\ [...] . 的用法: 表示任意字符,一般结合数量单位使用 # 匹配peng后面+3个任意字符 allSame = re.findall(r'peng.{3}',\"pengqin,pengsex,pengmm,xxpendx\") print allSame # out pengqin pengsex pengmm, [...] 表示一组数 常用的规则 [Pp]ython 能够匹配 python Python [0-9] 0123456789中一个\b数字，注意是表示一个，如果是多个需要加数量单位 [a-z] 小写 [A-Z] 大写 [a-zA-Z0-9]数字加大小写字母 0-9 非数字 \b数量，* , ?, + ,{m} {m,n} 字符一般结合数量来匹配 * 0次或者无限次 .*\\.jpg .jpg 任何前缀都可以匹配 + 1次或者无限次 +*\\.jpg .jpg .至少有一个字符 ? 0或者1次 abc? 可以匹配 ab 或者 abc {m} m次 go{2}gle 可以匹配 google {m,n} m到n次 go{2,3}e 可以匹配 gooe goooe 复杂用法 (...) 分组 |逻辑 | all_or = re.findall(r'zhangsan|lisi',\"zhangsan is man lisi is women\") print all_or # out: ['zhangsan', 'lisi'] (...) 可以接数量词 # 多个字符进行例如 '(md){3} 匹配重复三次的md' a2 = re.findall(r'(md){3}',\"dfasdfmdmdmdfasdfd\") print a2 # ip 规制匹配 (\\d{1,3}\\.){3}\\d{1,3} a_ip = re.match(r'(\\d{1,3}\\.){3}\\d{1,3}',\"198.123.2.1\") print a_ip.group() a_ip_error = re.match(r'(\\d{1,3}\\.){3}\\d{1,3}',\"198.dfs.2.1\") print a_ip_error 预定义字符集, 使用常用的字母结合反斜杠来表达规制 数字 \\d=[0-9] , \\D=\\d 空白字符(\\t\\r\\n\\f\\v) \\s 非空白字符\\S 单词字符 \\w = [A-Za-z0-9] 非单词字符 \\W = \\w 边界符号 特定字符开头和结尾 开头：^ 结尾：$ ; ^[0-9] 以数字开头 png$ 以 png结尾 常用 # encoding: UTF-8 import re # \\d = 0-9之间的数字 + 数量词 匹配 \\d 出现的 1次或者无限次 pattern = re.compile(r'\\d+') print pattern.match('one1two2three3four') # None 不是以数字开头 print pattern.split('one1two2three3four') # out ['one', 'two', 'three', 'four'] print pattern.match('123ddfs212').group() # out 123 pattern1 = re.compile(r'\\d+\\w+\\d+') print pattern1.match('123ddfs212').group() # \\w == [A-Za-z0-9_] 匹配 xx@xx.com 如果匹配.需要反斜杠 \\. mail = re.findall(r'\\w+@\\w+\\.com',\"xdafsdw@hotmial.com,iixxx@qq.com,ddfasdf@qq.net\") print mail python中支持的正则语法 pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-python/django-1-配置环境.html":{"url":"program-python/django-1-配置环境.html","title":"django-1-配置环境","keywords":"","body":" 创建第一个项目 环境配置 编写代码 数据库管理工具安装 django中配置数据库连接 创建Dgango 模块 默认导入的模块需要的表 创建第一个项目 环境配置 MAC + Python3 + pip3 命令安装：pip3 install django 版本 Python --version : Python 3.1.7 , in Python shell : import django django.get_version(): 2.1.4 创建项目：django-admin startproject [projectName] 启动服务 : Python manage.py runserver 命令行访问 127.0.0.1:8000 编写代码 创建一个poll应用： python manage.py startapp polls 编写页面 # /polls/views.py from django.http import HttpResponse # Create your views here. def index(request): return HttpResponse('Hello this is the polls index.'); # 配置应用路由 # polls/urls.py from django.urls import path from polls import views urlpatterns = [ # 带路径可以访问 path('hello/',views.index), # 根目录可以访问 path('', views.index), ] # 配置主项目路由 使用规则变化了 # /FirstDjango/urls.py from django.contrib import admin from django.urls import path,include urlpatterns = [ path('polls/', include('polls.urls')), path('admin/', admin.site.urls), ] \b浏览器访问http://localhost:8000/polls/ 数据库管理工具安装 前提是电脑上安装了mysql数据库\b 使用 pip3 命令行安装 pip3 install pymysql 在mysql 中配置 测试账号密码， python 创建测试用的数据库 db_python_django.db django中配置数据库连接 # FirstDjango/settings.py # 注意要改为自己的设置 import pymysql pymysql.install_as_MySQLdb() DATABASES = { 'default': { 'ENGINE': 'django.db.backends.mysql', 'NAME': 'db_python_django', 'host': '127.0.0.1', 'USER': 'python', 'PASSWORD':'python', 'PORT': '3306', } } 创建Dgango 模块 默认导入的模块需要的表 python manage.py migrate pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"program-web/":{"url":"program-web/","title":"Web","keywords":"","body":"pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"tools/":{"url":"tools/","title":"Tools","keywords":"","body":"pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"tools/jetbrains-register.html":{"url":"tools/jetbrains-register.html","title":"Jetbrains破解合集","keywords":"","body":"Jetbrains 系列破解 获取 jetbrains-agent.jar 百度获取，放到对应 App 的 bin 目录，点击下载 Appliction -> 显示包内容 -> Contents -> bin 修改 Custome VM Option Help -> Custome VM Option 在最下面下面一段代码，注意路径是 我们上面一部放入的文件 PyCharm -javaagent:/Applications/PyCharm.app/Contents/bin/jetbrains-agent.jar IntelliJ IDEA -javaagent:/Applications/IntelliJ IDEA.app/Contents/bin/jetbrains-agent.jar PhpStorm -javaagent:/Applications/PhpStorm.app/Contents/bin/jetbrains-agent.jar RubyMine -javaagent:/Applications/RubyMine.app/Contents/bin/jetbrains-agent.jar CLion -javaagent:/Applications/CLion.app/Contents/bin/jetbrains-agent.jar Reopen App Only user pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"tools/theme-dracula.html":{"url":"tools/theme-dracula.html","title":"Dracula样式合集","keywords":"","body":"Dracula 一个很舒服的主题 强迫症，在Vscode上看到了这个color scheme，所以，把很多开发工具的 color scheme 全部给换了 All: https://draculatheme.com/ Tools Address Download All https://draculatheme.com/ No Sumblime https://draculatheme.com/sublime/ https://github.com/dracula/sublime/archive/master.zip Atom https://draculatheme.com/atom/ https://github.com/dracula/atom/archive/master.zip pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "},"tools/Mac-commad.html":{"url":"tools/Mac-commad.html","title":"Mac常用命令","keywords":"","body":"kill 端口占用 lsof -i :{port} kill -9 {PID} pengqinping all right reserved，powered by Gitbook最后更新时间： 2020-02-16 16:47:38 "}}